/*
给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。

示例 :

给定这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5

说明 :

你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *p=head,*res;
        int count=0;
        if(head==NULL||head->next==NULL)return head;
        while(p){p=p->next;count++;}
        int times=count/k;
        int i=1;
        while(times--){
            head=reverseBetween(head,i,i+k-1);
            i+=k;
        }
        return head;
    }
private:
	ListNode* reverseBetween(ListNode* head, int m, int n) {
		if (head == NULL || head->next == NULL || m == n)return head;
		//int dis=n-m;

		ListNode * h, *t, *before = NULL;
		h = t = head;
		while (--m){
			before = h;
			h = h->next;
		}
		while (--n){
			t = t->next;
		}
		ListNode * last = t->next;
		t->next = NULL;

		ListNode *p = reverseList(h);
		if (before){
			before->next = p;
		}
		else{
			head = p;
		}
        while (p->next)p = p->next;
		p->next = last;
		return head;
	}

	ListNode* reverseList(ListNode* head) {
		if (head == NULL || head->next == NULL)
			return head;
		ListNode* prev = head;
		ListNode* cur = head->next;
		ListNode* temp = head->next->next;

		while (cur){
			temp = cur->next;
			cur->next = prev;
			prev = cur;
			cur = temp;
		}

		head->next = NULL;
		return prev;
	}
};
