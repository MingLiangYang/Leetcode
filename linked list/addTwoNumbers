/**
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
*/

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int c=0;
        int x;
        ListNode * head,*p;
        head=new ListNode(0);
        p=head;
        while(l1 && l2){
            ListNode * temp = new ListNode(0);
            x = l1->val+l2->val+c;
            c = x/10;
            x %= 10;
            temp->val=x;
            temp->next=NULL;
            p->next=temp;
            p=temp;
            l1=l1->next;
            l2=l2->next;
        }
        while(l1){
            ListNode * temp = new ListNode(0);
            x = l1->val+c;
            c = x/10;
            x %= 10;
            temp->val=x;
            temp->next=NULL;
            p->next=temp;
            p=temp;
            l1=l1->next;
        }
        while(l2){
            ListNode * temp = new ListNode(0);
            x = l2->val+c;
            c = x/10;
            x %= 10;
            temp->val=x;
            temp->next=NULL;
            p->next=temp;
            p=temp;
            l2=l2->next;
        }
        if(c!=0){
            ListNode * temp = new ListNode(c);
            
            p->next=temp;
        }    
        return head->next;
    }
};
